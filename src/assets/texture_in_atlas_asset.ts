import { TextureAsset, TextureAtlasAsset } from ".";
import { Rectangle } from "../utils";
import { TextureAssetBase } from "./texture_asset_base";

/**
 * A texture that is part of a texture atlas.
 * Stores a texture that was generated by the texture atlas + the source rectangle in texture for this segment.
 */
export class TextureInAtlasAsset extends TextureAssetBase {
	private texture: TextureAsset;
	private sourceRect: Rectangle;
	private atlas: TextureAtlasAsset;
	private sourceRectNormalized: Rectangle;

	/**
	 * @inheritdoc
	 */
	public constructor(url: string, texture: TextureAsset, sourceRect: Rectangle, atlas: TextureAtlasAsset) {
		super(url);
		this.texture = texture;
		this.sourceRect = sourceRect;
		this.atlas = atlas;
	}

	/**
	 * Return the source rectangle in texture atlas.
	 * @returns Source rectangle.
	 */
	public getSourceRectangle(): Rectangle {
		return this.sourceRect;
	}

	/**
	 * Return the source rectangle in texture atlas, in normalized 0.0-1.0 values.
	 * @returns Source rectangle.
	 */
	public getSourceRectangleNormalized(): Rectangle {
		if(!this.sourceRectNormalized) {
			this.sourceRectNormalized = new Rectangle(
				this.sourceRect.x / this.getWidth(),
				this.sourceRect.y / this.getHeight(),
				this.sourceRect.width / this.getWidth(),
				this.sourceRect.height / this.getHeight(),
			);
		}
		return this.sourceRectNormalized;
	}

	/**
	 * Return the texture asset of this atlas texture.
	 * @returns Texture asset.
	 */
	public getTexture(): TextureAsset {
		return this.texture;
	}

	/**
	 * Return the texture atlas class.
	 * @returns Parent atlas.
	 */
	public getAtlas(): TextureAtlasAsset {
		return this.atlas;
	}

	/**
	 * @inheritdoc
	 */
	public getImage(): unknown {
		return this.texture.getImage();
	}

	/**
	 * @inheritdoc
	 */
	public getWidth(): number {
		return this.texture.getWidth();
	}

	/**
	 * @inheritdoc
	 */
	public getHeight(): number {
		return this.texture.getHeight();
	}

	/**
	 * @inheritdoc
	 */
	public isValid(): boolean {
		return Boolean(this.texture.isValid());
	}

	/**
	 * @inheritdoc
	 */
	public destroy(): void {
	}

	/**
	 * @inheritdoc
	 */
	private getGlTexture(): WebGLTexture {
		return this.texture._glTexture;
	}
}
