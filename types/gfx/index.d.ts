declare const _exports: {
    _gl: RenderingContext;
    _initSettings: {
        antialias: boolean;
        alpha: boolean;
        depth: boolean;
        premultipliedAlpha: boolean;
        desynchronized: boolean;
    };
    _canvas: HTMLCanvasElement;
    _lastBlendMode: any;
    _activeEffect: any;
    _camera: import("./camera");
    _projection: import("./matrix");
    _currIndices: any;
    _dynamicBuffers: {
        positionBuffer: any;
        positionArray: Float32Array;
        textureCoordBuffer: any;
        textureArray: Float32Array;
        colorsBuffer: any;
        colorsArray: Float32Array;
        indexBuffer: any;
        linesIndexBuffer: any;
    };
    _fb: any;
    builtinEffects: {};
    meshes: {};
    defaultTextureFilter: string;
    defaultTextureWrapMode: string;
    whiteTexture: import("../assets/texture_asset");
    _renderTarget: import("../assets/texture_asset");
    _viewport: import("../utils/rectangle");
    _drawCallsCount: number;
    _drawQuadsCount: number;
    spritesBatch: import("./sprite_batch");
    readonly batchSpritesCount: number;
    readonly maxLineSegments: number;
    setContextAttributes(flags: Dictionary): void;
    setCanvas(element: HTMLCanvasElement): void;
    readonly canvas: HTMLCanvasElement;
    readonly Effect: typeof import("./effects/effect");
    readonly BasicEffect: typeof import("./effects/basic");
    readonly MsdfFontEffect: typeof import("./effects/msdf_font");
    readonly Sprite: typeof import("./sprite");
    readonly SpritesGroup: typeof import("./sprites_group");
    readonly Matrix: typeof import("./matrix");
    readonly Vertex: typeof import("./vertex");
    readonly TextAlignments: {
        Left: string;
        Right: string;
        Center: string;
    };
    readonly TextAlignment: {
        Left: string;
        Right: string;
        Center: string;
    };
    _TextAlignment_dep: boolean;
    createCamera(withViewport: boolean): import("./camera");
    setCameraOrthographic(offset: import("../utils/vector2")): import("./camera");
    createEffect(type: Class): typeof import("./effects/effect");
    maximizeCanvasSize(limitToParent: boolean, allowOddNumbers: boolean): void;
    setRenderTarget(texture: import("../assets/texture_asset") | import("../assets/texture_asset")[], keepCamera?: boolean): void;
    useEffect(effect: typeof import("./effects/effect")): void;
    setResolution(width: number, height: number, updateCanvasStyle: boolean): void;
    resetCamera(): void;
    applyCamera(camera: import("./camera")): void;
    getRenderingRegion(includeOffset: boolean): import("../utils/rectangle");
    getRenderingSize(): import("../utils/vector2");
    getCanvasSize(): import("../utils/vector2");
    setup(): any;
    buildText(fontTexture: import("../assets/font_texture_asset"), text: string, fontSize?: number, color?: import("../utils/color") | import("../utils/color")[], alignment?: string, offset?: import("../utils/vector2"), marginFactor?: import("../utils/vector2")): import("./sprites_group");
    drawGroup(group: import("./sprites_group"), cullOutOfScreen: boolean): void;
    drawSprite(sprite: import("./sprite")): void;
    cover(texture: import("../assets/texture_asset"), destRect: import("../utils/vector2") | import("../utils/rectangle"), sourceRect?: import("../utils/rectangle"), color: import("../utils/color") | import("../utils/color")[], blendMode?: string): void;
    draw(texture: import("../assets/texture_asset"), position: import("../utils/vector2") | import("../utils/vector3"), size: number | import("../utils/vector2") | import("../utils/vector3"), sourceRect: import("../utils/rectangle"), color: import("../utils/color") | import("../utils/color")[], blendMode?: string, rotation?: number, origin?: import("../utils/vector2"), skew?: import("../utils/vector2")): void;
    drawQuadFromVertices(texture: import("../assets/texture_asset"), vertices: import("./vertex")[], blendMode?: string): void;
    fillRect(destRect: import("../utils/rectangle"), color: import("../utils/color") | import("../utils/color")[], blend?: string, rotation?: number): void;
    fillRects(destRects: import("../utils/rectangle")[], colors: import("../utils/color") | import("../utils/color")[], blend?: string, rotation?: number | number[]): void;
    outlineRect(destRect: import("../utils/rectangle"), color: import("../utils/color"), blend?: string, rotation?: number): void;
    outlineCircle(circle: import("../utils/circle"), color: import("../utils/color"), blend?: string, lineAmount?: number): void;
    fillCircle(circle: import("../utils/circle"), color: import("../utils/color"), blend?: string, lineAmount?: number): void;
    fillCircles(circles: import("../utils/circle")[], colors: import("../utils/color") | import("../utils/color")[], blend?: string, lineAmount?: number): void;
    drawLine(startPoint: import("../utils/vector2"), endPoint: import("../utils/vector2"), color: import("../utils/color"), blendMode?: string): void;
    drawLinesStrip(points: import("../utils/vector2")[], colors: import("../utils/color") | import("../utils/color")[], blendMode?: string, looped?: boolean): void;
    drawLines(points: import("../utils/vector2")[], colors: import("../utils/color") | import("../utils/color")[], blendMode?: string): void;
    drawPoint(point: import("../utils/vector2"), color: import("../utils/color"), blendMode?: string): void;
    drawPoints(points: import("../utils/vector2")[], colors: import("../utils/color") | import("../utils/color")[], blendMode?: string): void;
    centerCanvas(): void;
    inScreen(shape: any): boolean;
    centerCamera(position: import("../utils/vector2"), useCanvasSize: boolean): void;
    _fillShapesBuffer(points: any, colors: any, blendMode: any, onReady: any, isStrip: any, groupsSize: any): void;
    _drawBatch(group: import("./sprites_group"), cullOutOfScreen: boolean): void;
    _setActiveTexture(texture: import("../assets/texture_asset")): void;
    readonly BlendModes: {
        AlphaBlend: string;
        Opaque: string;
        Additive: string;
        Multiply: string;
        Subtract: string;
        Screen: string;
        Overlay: string;
        Invert: string;
        Darken: string;
        DestIn: string;
        DestOut: string;
    };
    readonly TextureWrapModes: {
        Clamp: string;
        Repeat: string;
        RepeatMirrored: string;
    };
    readonly TextureFilterModes: {
        Nearest: string;
        Linear: string;
        NearestMipmapNearest: string;
        LinearMipmapNearest: string;
        NearestMipmapLinear: string;
        LinearMipmapLinear: string;
    };
    readonly drawCallsCount: number;
    readonly quadsDrawCount: number;
    clear(color?: import("../utils/color")): void;
    _setTextureFilter(filter: string): void;
    _setTextureWrapMode(wrapX: string, wrapY: string): void;
    _setBlendMode(blendMode: string): void;
    presentBufferedData(): void;
    __startDrawingSprites(activeEffect: any, transform: any): void;
    __finishDrawingSprites(): void;
    startFrame(): void;
    endFrame(): void;
    destroy(): void;
};
export = _exports;
//# sourceMappingURL=index.d.ts.map