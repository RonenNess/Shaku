declare const _exports: {
    builtinEffects: Dictionary;
    defaultTextureFilter: {
        Nearest: string;
        Linear: string;
        NearestMipmapNearest: string;
        LinearMipmapNearest: string;
        NearestMipmapLinear: string;
        LinearMipmapLinear: string;
    };
    defaultTextureWrapMode: {
        Clamp: string;
        Repeat: string;
        RepeatMirrored: string;
    };
    whiteTexture: import("../assets/texture_asset");
    _internal: {
        _gfx: any;
        readonly gl: any;
        drawQuadsCount: number;
        drawCallsCount: number;
        drawShapePolygonsCount: number;
        useEffect(effect: any, overrideFlags: any): void;
        getRenderingRegionInternal(includeOffset: any): any;
        setTextureFilter(filter: any): void;
        setTextureWrapMode(wrapX: any, wrapY: any): void;
        setActiveTexture(texture: any): void;
        setBlendMode(blendMode: any): void;
    };
    readonly webglVersion: number;
    readonly maxLineSegments: number;
    setContextAttributes(flags: Dictionary): void;
    setCanvas(element: HTMLCanvasElement): void;
    readonly canvas: HTMLCanvasElement;
    readonly DrawBatch: typeof import("./draw_batches/draw_batch");
    readonly SpriteBatch: typeof import("./draw_batches/sprite_batch");
    readonly SpriteBatch3D: typeof import("./draw_batches/sprite_batch_3d");
    readonly TextSpriteBatch: typeof import("./draw_batches/text_batch");
    readonly ShapesBatch: typeof import("./draw_batches/shapes_batch");
    readonly LinesBatch: typeof import("./draw_batches/lines_batch");
    readonly Effect: typeof import("./effects/effect");
    readonly SpritesEffect: typeof import("./effects/sprites");
    readonly SpritesEffectNoVertexColor: typeof import("./effects/sprites_no_vertex_color");
    readonly ShapesEffect: typeof import("./effects/shapes");
    readonly Sprites3dEffect: typeof import("./effects/sprites_3d");
    readonly MsdfFontEffect: typeof import("./effects/msdf_font");
    readonly Sprite: typeof import("./sprite");
    readonly SpritesGroup: typeof import("./sprites_group");
    readonly Matrix: typeof import("../utils/matrix");
    readonly Vertex: typeof import("./vertex");
    readonly TextAlignments: {
        Left: string;
        Right: string;
        Center: string;
    };
    createCamera(withViewport: boolean): import("./camera");
    createCamera3D(withViewport: boolean): import("./camera3d");
    setCameraOrthographic(offset: import("../utils/vector2")): import("./camera");
    maximizeCanvasSize(limitToParent?: boolean, allowOddNumbers?: boolean): void;
    setRenderTarget(texture: import("../assets/texture_asset") | import("../assets/texture_asset")[], keepCamera?: boolean): void;
    setResolution(width: number, height: number, updateCanvasStyle: boolean): void;
    resetCamera(): void;
    applyCamera(camera: import("./camera")): void;
    _viewport: import("../utils/rectangle");
    "__#11@#_getRenderingRegionInternal"(includeOffset: boolean): import("../utils/rectangle");
    "__#11@#_resetCachedRenderingRegion"(): void;
    getRenderingRegion(includeOffset: boolean): import("../utils/rectangle");
    getRenderingSize(): import("../utils/vector2");
    getCanvasSize(): import("../utils/vector2");
    setup(): any;
    buildText(fontTexture: import("../assets/font_texture_asset"), text: string, fontSize?: number, color?: import("../utils/color") | import("../utils/color")[], alignment?: string, offset?: import("../utils/vector2"), marginFactor?: import("../utils/vector2")): import("./sprites_group");
    centerCanvas(): void;
    inScreen(shape: any): boolean;
    centerCamera(position: import("../utils/vector2"), useCanvasSize: boolean): void;
    readonly BlendModes: {
        AlphaBlend: string;
        Opaque: string;
        Additive: string;
        Multiply: string;
        Subtract: string;
        Screen: string;
        Overlay: string;
        Invert: string;
        Darken: string;
        DestIn: string;
        DestOut: string;
    };
    readonly TextureWrapModes: {
        Clamp: string;
        Repeat: string;
        RepeatMirrored: string;
    };
    readonly TextureFilterModes: {
        Nearest: string;
        Linear: string;
        NearestMipmapNearest: string;
        LinearMipmapNearest: string;
        NearestMipmapLinear: string;
        LinearMipmapLinear: string;
    };
    readonly drawCallsCount: number;
    readonly quadsDrawCount: number;
    readonly shapePolygonsDrawCount: number;
    clear(color?: import("../utils/color")): void;
    clearDepth(value?: number): void;
    startFrame(): void;
    endFrame(): void;
    destroy(): void;
};
export = _exports;
//# sourceMappingURL=index.d.ts.map