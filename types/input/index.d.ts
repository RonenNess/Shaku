declare const _exports: {
    _callbacks: {
        mousedown: (event: any) => void;
        mouseup: (event: any) => void;
        mousemove: (event: any) => void;
        keydown: (event: any) => void;
        keyup: (event: any) => void;
        blur: (event: any) => void;
        wheel: (event: any) => void;
        touchstart: (event: any) => void;
        touchend: (event: any) => void;
        touchmove: (event: any) => void;
        contextmenu: (event: any) => void;
    };
    _targetElement: Window & typeof globalThis;
    preventDefaults: boolean;
    disableMouseWheelAutomaticScrolling: boolean;
    disableContextMenu: boolean;
    delegateTouchInputToMouse: boolean;
    delegateGamepadInputToKeys: boolean;
    resetOnFocusLoss: boolean;
    defaultDoublePressInterval: number;
    readonly MouseButtons: {
        left: number;
        middle: number;
        right: number;
    };
    readonly KeyboardKeys: {
        backspace: number;
        tab: number;
        enter: number;
        shift: number;
        ctrl: number;
        alt: number;
        break: number;
        caps_lock: number;
        escape: number;
        page_up: number;
        page_down: number;
        end: number;
        home: number;
        left: number;
        up: number;
        right: number;
        down: number;
        insert: number;
        delete: number;
        space: number;
        n0: number;
        n1: number;
        n2: number;
        n3: number;
        n4: number;
        n5: number;
        n6: number;
        n7: number;
        n8: number;
        n9: number;
        a: number;
        b: number;
        c: number;
        d: number;
        e: number;
        f: number;
        g: number;
        h: number;
        i: number;
        j: number;
        k: number;
        l: number;
        m: number;
        n: number;
        o: number;
        p: number;
        q: number;
        r: number;
        s: number;
        t: number;
        u: number;
        v: number;
        w: number;
        x: number;
        y: number;
        z: number;
        left_window_key: number;
        right_window_key: number;
        select_key: number;
        numpad_0: number;
        numpad_1: number;
        numpad_2: number;
        numpad_3: number;
        numpad_4: number;
        numpad_5: number;
        numpad_6: number;
        numpad_7: number;
        numpad_8: number;
        numpad_9: number;
        multiply: number;
        add: number;
        subtract: number;
        decimal_point: number;
        divide: number;
        f1: number;
        f2: number;
        f3: number;
        f4: number;
        f5: number;
        f6: number;
        f7: number;
        f8: number;
        f9: number;
        f10: number;
        f11: number;
        f12: number;
        numlock: number;
        scroll_lock: number;
        semicolon: number;
        equal_sign: number;
        plus: number;
        comma: number;
        dash: number;
        minus: number;
        period: number;
        forward_slash: number;
        grave_accent: number;
        open_bracket: number;
        back_slash: number;
        close_braket: number;
        single_quote: number;
    };
    readonly TouchKeyCode: string;
    setup(): any;
    _customKeys: any;
    startFrame(): void;
    _gamepadsData: any[] | Gamepad[];
    _defaultGamepad: any;
    _defaultGamepadIndex: number;
    _queriedGamepadStates: {};
    destroy(): void;
    setTargetElement(element: any): void;
    "__#12@#_resetAll"(keepMousePosition?: boolean): void;
    _mousePos: import("../utils/vector2");
    _mousePrevPos: import("../utils/vector2");
    _mouseState: {};
    _mouseWheel: any;
    _touchPosition: import("../utils/vector2");
    _isTouching: boolean;
    _touchStarted: boolean;
    _touchEnded: boolean;
    _keyboardState: {};
    _keyboardPrevState: {};
    _keyboardPressed: {};
    _keyboardReleased: {};
    _mousePressed: {};
    _mouseReleased: {};
    _customStates: {};
    _customPressed: {};
    _customReleased: {};
    _lastCustomReleasedTime: {};
    _lastCustomPressedTime: {};
    _prevLastCustomReleasedTime: {};
    _prevLastCustomPressedTime: {};
    _lastMouseReleasedTime: {};
    _lastKeyReleasedTime: {};
    _lastTouchReleasedTime: number;
    _lastMousePressedTime: {};
    _lastKeyPressedTime: {};
    _lastTouchPressedTime: number;
    _prevLastMouseReleasedTime: {};
    _prevLastKeyReleasedTime: {};
    _prevLastTouchReleasedTime: number;
    _prevLastMousePressedTime: {};
    _prevLastKeyPressedTime: {};
    _prevLastTouchPressedTime: number;
    gamepad(index?: number): import("./gamepad");
    gamepadId(index?: number): string;
    gamepadIds(): string[];
    readonly touchPosition: import("../utils/vector2");
    readonly touching: boolean;
    readonly touchStarted: boolean;
    readonly touchEnded: boolean;
    setCustomState(code: string, value: boolean): void;
    readonly mousePosition: import("../utils/vector2");
    readonly prevMousePosition: import("../utils/vector2");
    readonly mouseDelta: import("../utils/vector2");
    readonly mouseMoving: boolean;
    mousePressed(button?: number): boolean;
    mouseDown(button?: number): boolean;
    mouseUp(button?: number): boolean;
    mouseReleased(button?: number): boolean;
    keyDown(key: number): boolean;
    keyUp(key: number): boolean;
    keyReleased(key: any): boolean;
    keyPressed(key: number): boolean;
    readonly shiftDown: boolean;
    readonly ctrlDown: boolean;
    readonly altDown: boolean;
    readonly anyKeyPressed: boolean;
    readonly anyKeyDown: boolean;
    readonly anyMouseButtonPressed: boolean;
    readonly anyMouseButtonDown: boolean;
    "__#12@#_getValueWithCode"(code: string, mouseCheck: Function, keyboardCheck: Function, touchValue: any, customValues: any): any;
    down(code: string | string[]): boolean;
    released(code: string | string[]): boolean;
    pressed(code: string | string[]): boolean;
    lastReleaseTime(code: string): number;
    lastPressTime(code: string): number;
    doublePressed(code: string | string[], maxInterval: number): boolean;
    doubleReleased(code: string | string[], maxInterval: number): boolean;
    readonly mouseWheelSign: number;
    readonly mouseWheel: number;
    endFrame(): void;
    "__#12@#_getKeyboardKeyCode"(event: any): any;
    _onBlur(event: any): void;
    _onMouseWheel(event: any): void;
    _onKeyDown(event: any): void;
    _onKeyUp(event: any): void;
    _getTouchEventPosition(event: any): import("../utils/vector2");
    _onTouchStart(event: any): void;
    _onTouchEnd(event: any): void;
    _onTouchMove(event: any): void;
    _onMouseDown(event: any): void;
    _onMouseUp(event: any): void;
    _mouseButtonDown(button: any): void;
    _mouseButtonUp(button: any): void;
    _onMouseMove(event: any): void;
    _normalizeMousePos(): void;
    _getEvent(event: any): any;
};
export = _exports;
//# sourceMappingURL=index.d.ts.map